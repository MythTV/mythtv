diff --git a/qtbase/mkspecs/android-clang/qmake.conf b/qtbase/mkspecs/android-clang/qmake.conf
index d0a9a5a109..44d2f49121 100644
--- a/qtbase/mkspecs/android-clang/qmake.conf
+++ b/qtbase/mkspecs/android-clang/qmake.conf
@@ -42,6 +42,7 @@ isEmpty(ALL_ANDROID_ABIS): ALL_ANDROID_ABIS = $$DEFAULT_ANDROID_ABIS
 isEmpty(ALL_ANDROID_ABIS): ALL_ANDROID_ABIS = arm64-v8a armeabi-v7a x86_64 x86
 
 CONFIG += $$ANDROID_PLATFORM
+CONFIG += rtti exceptions
 
 ANDROID_MIN_SDK_VERSION = $$replace(ANDROID_PLATFORM, "android-", "")
 ANDROID_TARGET_SDK_VERSION = 30
diff --git a/qtbase/mkspecs/common/g++-win32.conf b/qtbase/mkspecs/common/g++-win32.conf
index c3a1f3a373..a87a68b325 100644
--- a/qtbase/mkspecs/common/g++-win32.conf
+++ b/qtbase/mkspecs/common/g++-win32.conf
@@ -31,7 +31,7 @@ QMAKE_YACCFLAGS         = -d
 
 QMAKE_CFLAGS_SSE2      += -mstackrealign
 
-QMAKE_CXXFLAGS_EXCEPTIONS_ON = -fexceptions -mthreads
+QMAKE_CXXFLAGS_EXCEPTIONS_ON = -fexceptions
 
 QMAKE_INCDIR            =
 
@@ -40,9 +40,10 @@ QMAKE_RUN_CC_IMP        = $(CC) -c $(CFLAGS) $(INCPATH) -o $@ $<
 QMAKE_RUN_CXX           = $(CXX) -c $(CXXFLAGS) $(INCPATH) -o $obj $src
 QMAKE_RUN_CXX_IMP       = $(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<
 
-QMAKE_LFLAGS_EXCEPTIONS_ON = -mthreads
+#QMAKE_CFLAGS += -mconsole
+#QMAKE_LFLAGS_EXCEPTIONS_ON = -mthreads
 QMAKE_LFLAGS_RELEASE    = -Wl,-s
-QMAKE_LFLAGS_CONSOLE    = -Wl,-subsystem,console
+#QMAKE_LFLAGS_CONSOLE    = -Wl,-subsystem,console
 QMAKE_LFLAGS_WINDOWS    = -Wl,-subsystem,windows
 QMAKE_LFLAGS_DLL        = -shared
 QMAKE_LFLAGS_GCSECTIONS = -Wl,--gc-sections
diff --git a/qtbase/mkspecs/features/android/default_pre.prf b/qtbase/mkspecs/features/android/default_pre.prf
index 9f90dcb391..80f9e2fc15 100644
--- a/qtbase/mkspecs/features/android/default_pre.prf
+++ b/qtbase/mkspecs/features/android/default_pre.prf
@@ -67,8 +67,7 @@ QMAKE_CXXFLAGS_THREAD   = $$QMAKE_CFLAGS_THREAD
 QMAKE_LIBS_EGL          = -lEGL
 QMAKE_LIBS_OPENGL_ES2   = -lGLESv2
 
-QMAKE_STRIP             =
-#$${CROSS_COMPILE}strip
+QMAKE_STRIP             = $$NDK_LLVM_PATH/bin/llvm-strip
 
 
 equals(QT_ARCH, x86): CROSS_COMPILE = $$NDK_LLVM_PATH/bin/i686-linux-android-
@@ -76,7 +75,7 @@ else: equals(QT_ARCH, x86_64): CROSS_COMPILE = $$NDK_LLVM_PATH/bin/x86_64-linux-
 else: equals(QT_ARCH, arm64-v8a): CROSS_COMPILE = $$NDK_LLVM_PATH/bin/aarch64-linux-android-
 else: CROSS_COMPILE = $$NDK_LLVM_PATH/bin/arm-linux-androideabi-
 
-QMAKE_RANLIB            = $${CROSS_COMPILE}ranlib
+QMAKE_RANLIB            = $$NDK_LLVM_PATH/bin/llvm-ranlib
 QMAKE_LINK_SHLIB        = $$QMAKE_LINK
 QMAKE_LFLAGS            =
 
diff --git a/qtbase/mkspecs/win32-g++/qmake.conf b/qtbase/mkspecs/win32-g++/qmake.conf
index 5de482f23b..7838c5bbd2 100644
--- a/qtbase/mkspecs/win32-g++/qmake.conf
+++ b/qtbase/mkspecs/win32-g++/qmake.conf
@@ -13,11 +13,18 @@ include(../common/windows-desktop.conf)
 # modifications to g++-win32.conf
 
 QMAKE_CC                = $${CROSS_COMPILE}gcc
-QMAKE_CFLAGS           += -fno-keep-inline-dllexport
+#QMAKE_CFLAGS          += -fno-keep-inline-dllexport
+QMAKE_CFLAGS           += -fcf-protection
 QMAKE_CFLAGS_WARN_ON   += -Wextra
 
 QMAKE_CXX               = $${CROSS_COMPILE}g++
-QMAKE_CXXFLAGS         += -fno-keep-inline-dllexport
+#QMAKE_CXXFLAGS        += -fno-keep-inline-dllexport
+QMAKE_CXXFLAGS         += -fcf-protection
+# Fix error about too many sections
+QMAKE_CXXFLAGS         += -Wa,-mbig-obj
+# Quiet ton of warnings about functions that are redeclared without
+# dllimport attribute
+QMAKE_CXXFLAGS         += -Wno-attributes
 QMAKE_CXXFLAGS_WARN_ON  = $$QMAKE_CFLAGS_WARN_ON
 
 QMAKE_LINK              = $${CROSS_COMPILE}g++
diff --git a/qtbase/src/corelib/Qt5AndroidSupport.cmake b/qtbase/src/corelib/Qt5AndroidSupport.cmake
index 6aca9299bc..9d7ae944ec 100644
--- a/qtbase/src/corelib/Qt5AndroidSupport.cmake
+++ b/qtbase/src/corelib/Qt5AndroidSupport.cmake
@@ -50,8 +50,11 @@ if (NOT ${PROJECT_NAME}-MultiAbiBuild)
   @QT_ANDROID_PACKAGE_SOURCE_DIR@
   @QT_ANDROID_VERSION_CODE@
   @QT_ANDROID_VERSION_NAME@
+  @QT_ANDROID_TARGET_SDK_VERSION@
+  @QT_ANDROID_MIN_SDK_VERSION@
   @QT_ANDROID_EXTRA_LIBS@
   @QT_QML_IMPORT_PATH@
+  "extraPrefixDirs" : [ @EXTRA_PREFIX_LIST@ ],
   "ndk": "@ANDROID_NDK@",
   "ndk-host": "@ANDROID_HOST_TAG@",
   "qml-root-path": "@CMAKE_CURRENT_SOURCE_DIR@",
@@ -106,6 +109,15 @@ if (NOT ${PROJECT_NAME}-MultiAbiBuild)
   generate_json_variable_list(ANDROID_MIN_SDK_VERSION "android-min-sdk-version")
   generate_json_variable_list(ANDROID_TARGET_SDK_VERSION "android-target-sdk-version")
 
+  # Extra prefix paths - This clause is from Qt6, but the rest of
+  # the code to support extraPrefixDirs already exists in Qt5.
+  foreach(prefix IN LISTS CMAKE_FIND_ROOT_PATH)
+      if (NOT "${prefix}" STREQUAL "${qt_android_install_dir_native}")
+          file(TO_CMAKE_PATH "${prefix}" prefix)
+          list(APPEND EXTRA_PREFIX_LIST "\"${prefix}\"")
+      endif()
+  endforeach()
+  string (REPLACE ";" "," EXTRA_PREFIX_LIST "${EXTRA_PREFIX_LIST}")
 
   configure_file(
     "${CMAKE_BINARY_DIR}/android_deployment_settings.json.in"
diff --git a/qtbase/src/corelib/global/qlogging.cpp b/qtbase/src/corelib/global/qlogging.cpp
index 292116cc47..45d702c80c 100644
--- a/qtbase/src/corelib/global/qlogging.cpp
+++ b/qtbase/src/corelib/global/qlogging.cpp
@@ -107,7 +107,9 @@
 #      define QLOGGING_HAVE_BACKTRACE
 #    endif
 #  elif (defined(__GLIBC__) && defined(__GLIBCXX__)) || (__has_include(<cxxabi.h>) && __has_include(<execinfo.h>))
-#    define QLOGGING_HAVE_BACKTRACE
+#    if __ANDROID_API__ >= 33
+#      define QLOGGING_HAVE_BACKTRACE
+#    endif
 #  endif
 #endif
 
diff --git a/qtbase/src/network/ssl/ssl.pri b/qtbase/src/network/ssl/ssl.pri
index 230c45c26f..d7527949e9 100644
--- a/qtbase/src/network/ssl/ssl.pri
+++ b/qtbase/src/network/ssl/ssl.pri
@@ -117,7 +117,7 @@ qtConfig(ssl) {
 
         qtConfig(openssl-linked): {
             android {
-                build_pass|single_android_abi: LIBS_PRIVATE += -lssl_$${QT_ARCH} -lcrypto_$${QT_ARCH}
+                build_pass|single_android_abi: LIBS_PRIVATE += -lssl -lcrypto
             } else: QMAKE_USE_FOR_PRIVATE += openssl
         } else: \
             QMAKE_USE_FOR_PRIVATE += openssl/nolink
diff --git a/qtbase/src/tools/androiddeployqt/main.cpp b/qtbase/src/tools/androiddeployqt/main.cpp
index de746d2eb4..f66d174376 100644
--- a/qtbase/src/tools/androiddeployqt/main.cpp
+++ b/qtbase/src/tools/androiddeployqt/main.cpp
@@ -343,7 +343,7 @@ QString fileArchitecture(const Options &options, const QString &path)
         return {};
     }
 
-    readElf = QLatin1String("%1 -needed-libs %2").arg(shellQuote(readElf), shellQuote(path));
+    readElf = QLatin1String("%1 --needed-libs %2").arg(shellQuote(readElf), shellQuote(path));
 
     FILE *readElfCommand = openProcess(readElf);
     if (!readElfCommand) {
@@ -636,7 +636,8 @@ bool quasiLexicographicalReverseLessThan(const QFileInfo &fi1, const QFileInfo &
 bool alwaysOverwritableFile(const QString &fileName)
 {
     return (fileName.endsWith(QLatin1String("/res/values/libs.xml"))
-            || fileName.endsWith(QLatin1String("/AndroidManifest.xml"))
+            // Don't override our Manifest file at every build.
+            // || fileName.endsWith(QLatin1String("/AndroidManifest.xml"))
             || fileName.endsWith(QLatin1String("/res/values/strings.xml"))
             || fileName.endsWith(QLatin1String("/src/org/qtproject/qt5/android/bindings/QtActivity.java")));
 }
@@ -1629,7 +1630,7 @@ QStringList getQtLibsFromElf(const Options &options, const QString &fileName)
         return QStringList();
     }
 
-    readElf = QLatin1String("%1 -needed-libs %2").arg(shellQuote(readElf), shellQuote(fileName));
+    readElf = QLatin1String("%1 --needed-libs %2").arg(shellQuote(readElf), shellQuote(fileName));
 
     FILE *readElfCommand = openProcess(readElf);
     if (!readElfCommand) {
